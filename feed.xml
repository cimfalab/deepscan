<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="https://cimfalab.github.io/deepscan/deepscan/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cimfalab.github.io/deepscan/deepscan/" rel="alternate" type="text/html" /><updated>2016-08-03T19:22:48+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/</id><title>좋은 JavaScript 코드 작성을 위한 블로그</title><subtitle>JavaScript 프로그래밍 노하우, 다양한 오류 사례를 공유합니다.</subtitle><entry><title>사용되지 않는 코드 (2)</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/08/unused-codes-2" rel="alternate" type="text/html" title="사용되지 않는 코드 (2)" /><published>2016-08-01T22:00:00+09:00</published><updated>2016-08-01T22:00:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/08/unused-codes-2</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/08/unused-codes-2">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;중복 조건&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;동일 결과 조건&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;도달 불가능한 코드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;사용되지 않는 표현식&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrap-up&quot; id=&quot;markdown-toc-wrap-up&quot;&gt;Wrap-Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어느새 다섯 번째 시간이네요^^&lt;/p&gt;

&lt;p&gt;지난 &lt;a href=&quot;/deepscan/2016/07/unused-codes-1&quot;&gt;포스팅&lt;/a&gt;에 이어 사용되지 않는 코드에 대한 얘기를 해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;중복 조건&lt;/h2&gt;

&lt;p&gt;if/else if 문에서 선행 조건에 의해 후행 조건이 항상 참 혹은 거짓으로 만족되는 경우입니다.&lt;/p&gt;

&lt;h3 id=&quot;nullundefined---&quot;&gt;null/undefined에 의한 중복 조건&lt;/h3&gt;

&lt;p&gt;아래 코드에서 후행 조건 &lt;code class=&quot;highlighter-rouge&quot;&gt;boardId != &quot;&quot;&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;boardId&lt;/code&gt; 값이 null일 때만 체크되며 &lt;code class=&quot;highlighter-rouge&quot;&gt;null != &quot;&quot;&lt;/code&gt;는 true이므로 항상 참이 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;amp;boardId=&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boardId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;개발자의 의도는 변수가 null이나 빈 값이 아닐 때만 파라미터를 추가하려는 것으로 보이며, &lt;code class=&quot;highlighter-rouge&quot;&gt;boardId != null &amp;amp;&amp;amp; boardId != &quot;&quot;&lt;/code&gt;로 코딩해야 합니다.&lt;/p&gt;

&lt;p&gt;비슷한 사례를 하나 더 보죠.&lt;/p&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;66&quot; data-line=&quot;2&quot;&gt;&lt;code&gt;validateInteger : function(str, min, max) {
    if (str==null || str==undefined || (str + &quot;&quot;).trim().length &amp;lt; 1) {
      return Em.I18n.t(&#39;number.validate.empty&#39;);
    } else {&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Apache Ambari 2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/utils/number_utils.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;str==undefined&lt;/code&gt;가 항상 거짓이 되는데, 그 이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;str&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;일 경우 선행 조건 &lt;code class=&quot;highlighter-rouge&quot;&gt;str==null&lt;/code&gt;에 의해 체크되기 때문입니다. 선행 조건에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined==null&lt;/code&gt;이 참인 이유는 == 연산자가 타입 체크 없이 비교를 하기 때문이구요. 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;str===null || str===undefined&lt;/code&gt;가 올바른 코드입니다. 헷갈리죠? :)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;비교 연산자에 의한 중복 조건&lt;/h3&gt;

&lt;p&gt;아래 코드에서는 선행 조건 &lt;code class=&quot;highlighter-rouge&quot;&gt;page &amp;lt;= 0&lt;/code&gt;에 의해 null 및 빈 문자열(““)이 체크되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;page == &quot;&quot;&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;page === null&lt;/code&gt;이 항상 거짓이 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;page&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;선행 조건에서 참이 되는 이유는 &amp;lt;= 같은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;비교 연산자로 null이나 빈 문자열을 숫자와 비교&lt;/a&gt;할 때 null이나 빈 문자열이 0으로 변환되기 때문입니다.&lt;/p&gt;

&lt;p&gt;이 경우 간단하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (!page || page &amp;lt; 0)&lt;/code&gt;로 체크하면 됩니다. :)&lt;/p&gt;

&lt;h3 id=&quot;if--&quot;&gt;중첩 if에서의 중복 조건&lt;/h3&gt;

&lt;p&gt;아래 코드는 중첩된(nested) if 문에서 중복 조건에 의해 로직이 실행되지 않는 예입니다.&lt;/p&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;863&quot; data-line=&quot;3,7&quot;&gt;&lt;code&gt;bulkOperationForHostComponentsDecommissionCallBack: function (operationData, data) {
    ...
    if (turn_off) { // 1)
      ...
    } else {
        ...
        if (turn_off) { // 2)
          parameters[&#39;included_hosts&#39;] = hostsWithComponentInProperState.join(&#39;,&#39;) // 3)
        }
        else {
          parameters[&#39;excluded_hosts&#39;] = hostsWithComponentInProperState.join(&#39;,&#39;);
        }&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Apache Ambari 2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/controllers/main/host.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;turn_off&lt;/code&gt; 체크는 1)의 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 블럭 안에 포함되어 있으므로 항상 false입니다.
따라서 3)의 코드는 전혀 실행되지 않으므로 필요 없는 코드인지 실행 경로가 잘못된 것인지 체크할 필요가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;동일 결과 조건&lt;/h2&gt;

&lt;p&gt;조건식의 결과가 항상 동일한 경우입니다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;미정의 변수 사용&lt;/h3&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.header_inner&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;mouseleave&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schWrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closeSch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closeSch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1)&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closeSch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;closeSch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 1)의 조건식 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (closeSch)&lt;/code&gt;는 항상 false가 됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;closeSch&lt;/code&gt;가 지역 변수이면서 나중에야 값이 할당되기 때문이죠.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;closeSch&lt;/code&gt; 변수를 전역 변수로 선언해야 &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;에서 반환된 핸들을 통해 정상적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;clearTimeout&lt;/code&gt; 호출이 가능합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;값이 변하지 않는 변수 사용&lt;/h3&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;384&quot; data-line=&quot;4,8&quot;&gt;&lt;code&gt;validate: function () {
    ...
    var isError = false;
    var isWarn = false;

    ... &amp;lt;- isWarn 변수를 설정하는 부분이 없음

    if (!isWarn || isError) { // Errors get priority
      this.set(&#39;warnMessage&#39;, &#39;&#39;);
      this.set(&#39;warn&#39;, false);
    } else {
      this.set(&#39;warn&#39;, true);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Apache Ambari 2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/models/configs/objects/service_config_property.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isWarn&lt;/code&gt; 변수가 초기값을 그대로 갖기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (!isWarn)&lt;/code&gt;은 항상 true가 되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt; 분기는 실행되지 않습니다. 의도한 동작인지 체크할 필요가 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;도달 불가능한 코드&lt;/h2&gt;

&lt;p&gt;말 그대로 절대 실행되지 않는(unreachable) 코드입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//rows[&#39;startDate&#39;] = rows[&#39;startDate&#39;].toDate(datePattern);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;rows[&quot;startDate&quot;] is not date format&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;withusSave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;죄송합니다. 시스템 점검중입니다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;busiName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 두 경우 모두 절대 실행되지 않는 코드를 갖고 있습니다.&lt;/p&gt;

&lt;p&gt;첫째 코드는 &lt;code class=&quot;highlighter-rouge&quot;&gt;try&lt;/code&gt; 문 내의 코드가 주석 처리되어 실행 코드가 없으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch&lt;/code&gt; 문 내의 코드가 실행될 수 없습니다.&lt;/p&gt;

&lt;p&gt;두 번째 코드는 코드 중간에 명시적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 문이 삽입되어 있는 경우죠. 실제로 이런 코드들이 종종 발견됩니다. :)&lt;/p&gt;

&lt;p&gt;개발자가 테스트를 위해 임시로 삽입했다가 테스트 완료 후 삭제하는 것을 잊었거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 이후의 코드를 향후 사용 목적으로 남겨 놓는 경우일 텐데 좋은 코드라고 볼 수는 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;사용되지 않는 표현식&lt;/h2&gt;

&lt;p&gt;표현식(expression)의 결과값을 사용하지 않는 경우입니다.&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;삼항 연산자&lt;/h3&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;642&quot; data-line=&quot;7&quot;&gt;&lt;code&gt;onErrorPerHost: function (actions, contentHost) {
    if (!actions) return;
    if (actions.someProperty(&#39;Tasks.status&#39;, &#39;FAILED&#39;) || actions.someProperty(&#39;Tasks.status&#39;, &#39;ABORTED&#39;) || actions.someProperty(&#39;Tasks.status&#39;, &#39;TIMEDOUT&#39;)) {
      contentHost.set(&#39;status&#39;, &#39;warning&#39;);
    }
    if ((this.get(&#39;content.cluster.status&#39;) === &#39;PENDING&#39; &amp;amp;&amp;amp; actions.someProperty(&#39;Tasks.status&#39;, &#39;FAILED&#39;)) || (this.isMasterFailed(actions))) {
      contentHost.get(&#39;status&#39;) !== &#39;heartbeat_lost&#39; ? contentHost.set(&#39;status&#39;, &#39;failed&#39;) : &#39;&#39;;
    }
  },&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Apache Ambari 2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/controllers/wizard/step9_controller.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 코드 중 삼항 연산자의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;&#39;&lt;/code&gt;가 사용되지 않는 표현식입니다.
삼항 연산자에서 실행할 로직이 없을 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;&#39;&lt;/code&gt; 같은 임의의 값을 반환하는 경우가 많이 있는데, 아래처럼 작성하는 것이 보다 간결합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;contentHost.get(&#39;status&#39;) !== &#39;heartbeat_lost&#39; &amp;amp;&amp;amp; contentHost.set(&#39;status&#39;, &#39;failed&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;html--&quot;&gt;HTML 이벤트 핸들러&lt;/h3&gt;

&lt;p&gt;아래 코드는 HTML의 이벤트 핸들러에서 검출된 것입니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onkeydown=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;if(event.keyCode==13) handled=true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onblur=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handled-false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;handled-false&lt;/code&gt;가 사용되지 않는 표현식입니다.
정적 분석기 차원에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;handled&lt;/code&gt; 변수 값에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; 값을 뺀 결과를 사용하지 않아서 검출된 것이고, 실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;handled=false&lt;/code&gt;에 대한 개발자의 명백한 오타이죠. 그 결과 &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; 이벤트에서의 &lt;code class=&quot;highlighter-rouge&quot;&gt;handled&lt;/code&gt; 변수 리셋이 동작하지 않습니다.&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;참고:&lt;/strong&gt; JavaScript의 built-in 함수를 사용할 때도 결과값 사용에 주의해야 합니다.
가령 개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;str.substring(0, 3);&lt;/code&gt; 같이 사용하는 경우인데, &lt;code class=&quot;highlighter-rouge&quot;&gt;substring&lt;/code&gt; 함수는 해당 문자열 객체를 직접 조작(side-effecting)하는 것이 아니라 새로운 객체를 반환하기 때문에 반환된 객체를 사용하지 않으면 함수 호출의 의미가 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;이상 사용되지 않는 코드 패턴에 대해 알아보았습니다.
깨끗한 JavaScript 코드 작성을 위해 참고하세요.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;코드 패턴&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;/deepscan/2016/07/unused-codes-1#section&quot;&gt;함수 중복 정의&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;/deepscan/2016/07/unused-codes-1#section-1&quot;&gt;객체 속성 중복 정의&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;/deepscan/2016/07/unused-codes-1#section-2&quot;&gt;불필요한 인자 전달&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;#section&quot;&gt;중복 조건&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;#section-2&quot;&gt;동일 결과 조건&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;#section-5&quot;&gt;도달 불가능한 코드&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;#section-6&quot;&gt;사용되지 않는 표현식&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><category term="JavaScript" /><category term="중복 조건" /><category term="동일 결과 조건" /><category term="사용되지 않는 표현식" /><category term="사용되지 않는 코드" /><summary>JavaScript에서의 중복 조건, 사용되지 않는 표현식 등 사용되지 않는 코드의 사례에 대해 알아봅니다.</summary></entry><entry><title>사용되지 않는 코드 (1)</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/07/unused-codes-1" rel="alternate" type="text/html" title="사용되지 않는 코드 (1)" /><published>2016-07-29T13:30:00+09:00</published><updated>2016-07-29T13:30:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/07/unused-codes-1</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/07/unused-codes-1">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;함수 중복 정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;객체 속성 중복 정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;불필요한 인자 전달&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrap-up&quot; id=&quot;markdown-toc-wrap-up&quot;&gt;Wrap-Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;네 번째 시간입니다.&lt;/p&gt;

&lt;p&gt;오늘은 지난 &lt;a href=&quot;/deepscan/2016/07/variable-misuse&quot;&gt;포스팅&lt;/a&gt;에서 알아본 변수의 잘못된 사용 사례 중 변수 재정의와 연관해서 사용되지 않는 코드에 대한 얘기를 해 보려고 합니다.&lt;/p&gt;

&lt;p&gt;변수 재정의란 변수에 할당한 값을 사용하지 않은 상태에서 새로운 값을 할당하는 경우였는데요, 이와 같이 사용되지 않는 코드는 처음부터 필요가 없거나 혹은 개발자의 의도와 다른 결과를 유도할 수 있어서 체크가 필요합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repeatMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeatMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeatCondition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;repeatMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;repeatCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;repeatMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DAY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;repeatMethod&lt;/code&gt;에 할당된 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.options.repeatMethod&lt;/code&gt;이 사용되지 않습니다.
애초부터 필요 없는 할당이었거나 아니면 원래 개발자의 의도가 옵션에 설정된 &lt;code class=&quot;highlighter-rouge&quot;&gt;repeatMethod&lt;/code&gt;를 기본 값으로 사용하려는 것이었을 수도 있습니다. 후자의 경우라면 버그성 상황이 되는 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;함수 중복 정의&lt;/h2&gt;

&lt;p&gt;중복 정의된 함수가 존재하는 경우입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;finalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadingClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadingClose&lt;/code&gt; 함수가 중복 정의되어 있는데 JavaScript에는 함수 오버로딩이 없으므로 &lt;strong&gt;마지막에 정의된 함수만 유효&lt;/strong&gt;하게 됩니다.&lt;/p&gt;

&lt;p&gt;이전에 정의된 함수 1)은 사용되지 않으면서 코드만 크게 만들고 유지보수를 어렵게 합니다. 개발자가 함수 1)을 열심히 수정했는데, 실제로는 함수 2)를 수정했어야 한다는 걸 나중에 알게 될 수도 있다는 거죠. :)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;객체 속성 중복 정의&lt;/h2&gt;

&lt;p&gt;중복 정의된 객체 속성이 존재하는 경우입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#pageIndex&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;#pageSize&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sortname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;sortorder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;asc&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rowNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;rowNum&lt;/code&gt; 속성이 중복 정의되고 있습니다. 역시 &lt;strong&gt;마지막 속성만 유효&lt;/strong&gt;하므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;rowNum&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;#pageSize&lt;/code&gt; 엘리먼트에 설정된 값과 관계 없이 항상 15가 됩니다. 가령 사용자가 어떤 목록을 30개씩 끊어서 보겠다고 설정 후 조회해도 15개씩 보여진다는 것이죠.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;불필요한 인자 전달&lt;/h2&gt;

&lt;p&gt;함수에서 사용되지 않는 인자를 호출자(caller)가 전달하는 경우입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;ConditionDialog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;divId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildHtml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;divId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ConditionDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;div class=&quot;view&quot;&amp;gt;&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeatPeriod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;/div&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buildHtml&lt;/code&gt; 함수는 인자 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; 객체의 속성을 사용하므로 호출 인자가 필요 없습니다. 즉, 호출자가 전달한 &lt;code class=&quot;highlighter-rouge&quot;&gt;divId&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt;는 사용되지 않고 무시됩니다.&lt;/p&gt;

&lt;p&gt;이런 상황은 다음과 같은 리팩토링을 고려할 필요가 있음을 나타내기도 합니다. (Code smell이라고 하죠?)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;buildHtml&lt;/code&gt; 함수 호출 전 혹은 함수 내부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;this.options&lt;/code&gt; 속성이 잘 설정되어 있는지 체크&lt;/li&gt;
  &lt;li&gt;함수의 독립적인 동작이 가능하도록 두 개의 인자를 갖도록 수정&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;이상 사용되지 않는 코드 패턴에 대해 알아보았습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수 중복 정의&lt;/li&gt;
  &lt;li&gt;객체 속성 중복 정의&lt;/li&gt;
  &lt;li&gt;불필요한 인자 전달&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 포스팅에서는 중복 조건, 사용되지 않는 표현식 등 추가적인 패턴에 대해 알아보도록 하겠습니다.&lt;/p&gt;</content><category term="JavaScript" /><category term="중복 함수" /><category term="중복 속성" /><category term="불필요한 인자" /><category term="사용되지 않는 코드" /><category term="unused codes" /><summary>JavaScript에서의 중복 속성 정의, 불필요한 인자 전달 등 사용되지 않는 코드에 대해 알아봅니다.</summary></entry><entry><title>ECMAScript 6 소개</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/07/ecmascript-6" rel="alternate" type="text/html" title="ECMAScript 6 소개" /><published>2016-07-28T13:00:00+09:00</published><updated>2016-07-28T13:00:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/07/ecmascript-6</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/07/ecmascript-6">&lt;blockquote class=&quot;preface&quot;&gt;
  &lt;p&gt;해당 글은 동료 개발자 우영님이 기여해 주었습니다.&lt;/p&gt;

  &lt;p&gt;저는 아래 자료에서 소개된 기능들 중 클래스 정의, &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; 키워드로 부모 클래스의 함수 호출, &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; 키워드로 변수 정의가 우선 와 닿더군요. 특히 블럭 범위 변수를 정의하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;은 &lt;a href=&quot;/deepscan/2016/07/variable-misuse&quot;&gt;JavaScript에서 변수 사용 시 주의할 점&lt;/a&gt; 포스팅에서 다뤘던 함수 범위 변수에 대한 대안이 되겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;현재 사용하는 대부분의 JavaScript는 2009년에 처음 제정되어 2011년에 개정된 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/&quot;&gt;ECMAScript 5.1&lt;/a&gt; 표준에 기반하고 있습니다.&lt;/p&gt;

&lt;p&gt;이후 클래스 기반 상속, 데이터 바인딩(&lt;code class=&quot;highlighter-rouge&quot;&gt;Object.observe&lt;/code&gt;), Promise 등 다양한 요구사항들이 도출되었고 그 결과 2015년 6월에 대대적으로 업데이트된 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ECMAScript 6 &lt;/a&gt;가 발표되었고, 매년 표준을 업데이트하는 정책에 따라 올해 6월에 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/7.0/&quot;&gt;ECMAScript 7 &lt;/a&gt;까지 발표되었습니다.&lt;/p&gt;

&lt;p&gt;ECMAScript 6가 제정된지도 일년이 지났고 Internet Explorer를 제외한 &lt;a href=&quot;http://kangax.github.io/compat-table/es6/&quot;&gt;대부분의 브라우저가 표준을 지원하는 상황&lt;/a&gt;에서 웹 개발자들이 이제는 ECMAScript 6에 대해 관심을 가질 필요가 있다고 생각합니다.&lt;/p&gt;

&lt;p&gt;그래서 제가 팀 내부에 발표했던 ECMAScript 6 소개 자료를 공유합니다.
새로운 기능들에 대해 코드와 함께 정리되어 있어 ECMAScript 6 이해에 도움이 될 것이라고 생각합니다.&lt;/p&gt;

&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/d6HOlv2E0FNHNX&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;
&lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/WooyoungCho/ecmascript-6-64456124&quot; title=&quot;ECMAScript 6의 새로운 것들!&quot; target=&quot;_blank&quot;&gt;ECMAScript 6의 새로운 것들!&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/WooyoungCho&quot; target=&quot;_blank&quot;&gt;WooYoung Cho&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;위 발표 자료에 언급된 주요 참고 자료입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hacks.mozilla.or.kr/category/es6-in-depth/&quot;&gt;ES6 In Depth&lt;/a&gt; (Mozilla 블로그에 게재된 시리즈로 재미있고 각 기능에 대한 깊이 있는 설명을 담고 있어 발표에서 많이 참조)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://es6-features.org&quot;&gt;ECMAScript 6 — New Features: Overview &amp;amp; Comparison&lt;/a&gt; (ECMAScript 5와의 코드 비교를 통해 기능별 설명)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git.io/es6features&quot;&gt;Overview of ECMAScript 6 features&lt;/a&gt; (ECMAScript 6 전체에 대한 개괄적인 소개)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://exploringjs.com/&quot;&gt;Exploring ES6&lt;/a&gt; (ES6 전체에 대한 상세하고 친절한 설명을 담은 무료 e-book)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ECMAScript 6 기반 개발 환경에 대해서는 다음을 참고하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://readme.skplanet.com/?p=12185&quot;&gt;ES6 기반 프론트엔드 개발 환경 알아보기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://huns.me/development/1913&quot;&gt;ES2015 단위 테스트 환경 구축하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>wcho</name></author><category term="JavaScript" /><category term="ECMAScript 6" /><category term="ES6" /><summary>새롭게 확정된 JavaScript 명세인 ECMAScript 6의 새로운 기능들을 소개합니다.</summary></entry><entry><title>JavaScript에서 변수 사용 시 주의할 점</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/07/variable-misuse" rel="alternate" type="text/html" title="JavaScript에서 변수 사용 시 주의할 점" /><published>2016-07-28T11:30:00+09:00</published><updated>2016-07-28T11:30:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/07/variable-misuse</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/07/variable-misuse">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;변수 선언 전 사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;변수 중복 선언&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;변수 재정의&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrap-up&quot; id=&quot;markdown-toc-wrap-up&quot;&gt;Wrap-Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;세 번째 시간입니다. 오늘은 JavaScript 변수에 관해 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;JavaScript는 다른 언어와 다르게 변수 범위가 블럭이 아닌 함수 단위이고, 호이스팅 특성 때문에 변수 사용 시 특히 주의가 요구됩니다.&lt;/p&gt;

&lt;p&gt;오늘은 검출된 사례 중 잘못된 변수 사용에 대해 공유하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;변수 선언 전 사용&lt;/h2&gt;

&lt;p&gt;변수 선언 전에 변수를 사용하여 변수가 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; 값을 갖는 경우입니다.
일반적인 언어에서는 변수를 선언하기 전에 사용하면 컴파일 에러가 발생하지만, JavaScript에서는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;호이스팅(hoisting)&lt;/a&gt;이라고 해서 변수나 함수 선언이 인터프리터에 의해 최상위로 끌어올려집니다.&lt;/p&gt;

&lt;p&gt;그래서 다음과 같은 실행이 가능해지죠.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;마찬가지로 변수를 선언 전에 먼저 사용하는 것도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;patternId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patternId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sortOrder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;rowOrderArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patternId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#patternNameLabel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;patternId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/delete.do&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rowOrderArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;patternId&lt;/code&gt; 속성은 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; 값으로 설정됩니다.&lt;/p&gt;

&lt;p&gt;하지만 에러는 발생하지 않기 때문에 실제로 돌려 보는 시점에서야 문제를 알 수 있게 됩니다. 가령 &lt;code class=&quot;highlighter-rouge&quot;&gt;rowOrderArr&lt;/code&gt; 객체로 서버에 AJAX 호출을 했을 때에야 알 수 있죠. (“클라이언트에서 patternId 값을 안 채워줘서 서버 에러가 나요!”)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;변수 중복 선언&lt;/h2&gt;

&lt;p&gt;함수 내에 중복된 변수 선언이 존재하는 경우입니다.&lt;/p&gt;

&lt;p&gt;개발자들은 일반적으로 변수가 블럭 범위(block scope)를 갖는다고 알기 때문에 아래와 같이 작성을 하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;pjtCode&lt;/code&gt; 변수가 각 블럭에 한정된다고 생각합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;amp;PJTCODE=&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pjtCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pjtCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;BAD_CODE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pjtCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pjtCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;하지만 JavaScript에서는 변수가 &lt;strong&gt;함수 범위(function scope)&lt;/strong&gt;를 갖고 호이스팅에 의해 선언이 끌어올려지므로, 실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;pjtCode&lt;/code&gt; 변수는 함수 내에서 하나로 유지됩니다.
즉 1)과 2)에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;pjtCode&lt;/code&gt; 값은 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;BAD_CODE&lt;/code&gt;로 출력됩니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt;가 9보다 클 경우)&lt;/p&gt;

&lt;p&gt;이와 같이 호이스팅은 JavaScript 코드 해석을 비직관적으로 만드는 측면이 있기 때문에 보통 코드 컨벤션에서 &lt;strong&gt;선언문을 항상 최상위에 작성&lt;/strong&gt;하도록 권고합니다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;변수 재정의&lt;/h2&gt;

&lt;p&gt;변수를 재정의함으로써 이전에 정의한 변수가 사용되지 않는 경우(dead variable)입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;userName&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 코드에서 1)에서 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 변수가 2)에서 재정의되면서 1)에서 할당한 &lt;code class=&quot;highlighter-rouge&quot;&gt;userName&lt;/code&gt; 파라미터가 무시됩니다.
따라서 다음과 같이 수정되어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;userName&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/gi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;이상 JavaScript 변수 사용에 대해 알아보았습니다.&lt;/p&gt;

&lt;p&gt;다른 언어와 다른 JavaScript 특성을 이해하고 변수 사용에 주의하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수 선언은 함수 최상위에 한번만 한다.&lt;/li&gt;
  &lt;li&gt;해당 변수 정의가 누락되는 일 없이 사용되도록 한다.&lt;/li&gt;
&lt;/ul&gt;</content><category term="JavaScript" /><category term="변수" /><category term="variable" /><category term="호이스팅" /><category term="hoisting" /><summary>JavaScript에서 변수 사용 시 중복 선언, 재정의, 선언 전 사용 등의 주의할 점을 알아봅니다.</summary></entry><entry><title>Firefox에서 이벤트 객체 제대로 사용하기</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/07/event-in-firefox" rel="alternate" type="text/html" title="Firefox에서 이벤트 객체 제대로 사용하기" /><published>2016-07-27T10:25:00+09:00</published><updated>2016-07-27T10:25:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/07/event-in-firefox</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/07/event-in-firefox">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#event--&quot; id=&quot;markdown-toc-event--&quot;&gt;글로벌 event 객체 사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eventsrcelement--&quot; id=&quot;markdown-toc-eventsrcelement--&quot;&gt;Event.srcElement 속성 사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eventreturnvalue--&quot; id=&quot;markdown-toc-eventreturnvalue--&quot;&gt;Event.returnValue 속성 사용&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrap-up&quot; id=&quot;markdown-toc-wrap-up&quot;&gt;Wrap-Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두 번째 시간에서는 브라우저 호환성에 관해 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;브라우저 호환성이란 Internet Explorer, Chrome, Firefox 등 다양한 브라우저에서 웹 사이트가 정상적으로 동작하는지에 대한 체크입니다.&lt;/p&gt;

&lt;p&gt;이를 위해 &lt;a href=&quot;https://blog.outsider.ne.kr/1216&quot;&gt;Browsersync&lt;/a&gt; 같은 도구나 &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt; 같은 서비스를 사용할 수 있는데, 이들 방식은 각 브라우저를 실제로 구동하고 웹 사이트를 로딩한 이후 동작 여부를 사용자가 눈으로 확인해야 합니다.&lt;/p&gt;

&lt;p&gt;하지만 제가 개발 중인 솔루션에서는 JavaScript 정적 분석과 브라우저 호환성 데이터베이스를 통해 소스 레벨에서 브라우저 호환 여부를 자동 체크할 수 있습니다.&lt;/p&gt;

&lt;p&gt;오늘은 검출된 사례 중 Firefox에서 흔히 잘못 사용하는 이벤트 객체를 공유하고 제대로 사용하는 방법을 알아보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;event--&quot;&gt;글로벌 event 객체 사용&lt;/h2&gt;

&lt;p&gt;이벤트 핸들러에서 핸들러에 전달된 이벤트 객체를 사용하지 않고 글로벌 객체(&lt;code class=&quot;highlighter-rouge&quot;&gt;window.event&lt;/code&gt; 혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;)를 사용하는 경우입니다.
Internet Explorer와 Chrome은 글로벌 객체를 지원하지만 Firefox에서는 해당 코드에서 에러가 발생합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReferenceError: event is not defined&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;글로벌 객체 &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;를 사용하는 코드를 보도록 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;click touchstart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.board_view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.board_view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.board_view&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.is-click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;activeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.is-click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;board_view&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//board&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1) ReferenceError: event is not defined&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;activeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;개발자의 의도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;is-click&lt;/code&gt; 클래스를 가진 엘리먼트를 클릭했을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt; 클래스를 설정하고 event propagation을 멈추는 것입니다.
Event propagation을 막아야 하는 이유는 &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt; 객체에 설정된 이벤트 핸들러가 있고 여기서는 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt; 클래스를 제거하기 때문이죠.&lt;/p&gt;

&lt;p&gt;하지만 Firefox에서는 1) 부분에서 에러가 발생하고 event propagation이 중단되지 않습니다.
따라서 어떤 액션을 취했을 때 설정한 &lt;code class=&quot;highlighter-rouge&quot;&gt;active&lt;/code&gt; 상태가 &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt;의 이벤트 핸들러에 의해 바로 해제되는 현상이 발생합니다.&lt;/p&gt;

&lt;p&gt;키 입력 처리에 대한 예를 하나 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventUtil_blockBackspace_onkeydown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 코드는 사용자가 backspace 키를 눌렀을 때 어떤 동작을 하기 위한 것인데, 역시 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.event&lt;/code&gt;가 Firefox에서 지원되지 않으므로 원하는 대로 동작하지 않습니다.&lt;/p&gt;

&lt;p&gt;따라서 글로벌 &lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt; 객체를 사용하는 경우는 &lt;strong&gt;이벤트 핸들러의 인자로 전달된 이벤트 객체를 사용&lt;/strong&gt;하도록 수정되어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.is-click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;board_view&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//board&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stopPropagation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;activeFlag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;eventsrcelement--&quot;&gt;Event.srcElement 속성 사용&lt;/h2&gt;

&lt;p&gt;이벤트 핸들러에서 어떤 엘리먼트로부터 이벤트가 발생했는지 알기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Event.srcElement&lt;/code&gt; 속성을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventUtil_blockBackspace_onkeydown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;하지만 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement&quot;&gt;Firefox는 해당 속성을 지원하지 않기 때문에&lt;/a&gt; 에러가 발생하고 로직이 수행되지 않습니다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같이 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Event.target&lt;/code&gt; 속성을 함께 사용&lt;/strong&gt;해야 모든 브라우저에 대한 대응이 가능합니다. (Internet Explorer 8은 또 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt;만 지원하거든요. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/target&quot;&gt;MDN&lt;/a&gt;을 참고하세요.)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventUtil_blockBackspace_onkeydown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;eventreturnvalue--&quot;&gt;Event.returnValue 속성 사용&lt;/h2&gt;

&lt;p&gt;이벤트 핸들러에서 해당 이벤트를 취소하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Event.returnValue&lt;/code&gt; 속성을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventUtil_blockBackspace_onkeydown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;returnValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;하지만 Firefox는 해당 속성을 지원하지 않기 때문에 에러가 발생하고 로직이 수행되지 않습니다.&lt;/p&gt;

&lt;p&gt;따라서 다음과 같이 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preventDefault&lt;/code&gt; 함수를 사용&lt;/strong&gt;하도록 수정되어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventUtil_blockBackspace_onkeydown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;preventDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;이상 Firefox에서의 이벤트 객체 사용에 대해 알아보았습니다.&lt;/p&gt;

&lt;p&gt;다양한 브라우저에서 호환되는 이벤트 핸들러의 작성을 위해서 다음 두 가지는 기억하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Firefox에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.event&lt;/code&gt; 객체가 존재하지 않으므로 이벤트 핸들러에 전달된 이벤트 객체를 사용해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Event.srcElement&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;Event.target&lt;/code&gt;을 통해 이벤트가 발생한 엘리먼트를 얻어야 한다.&lt;/li&gt;
&lt;/ul&gt;</content><category term="JavaScript" /><category term="Firefox" /><category term="이벤트" /><category term="Event" /><category term="브라우저 호환성" /><category term="browser compatibility" /><summary>[브라우저 호환성] Firefox에서 흔히 잘못 사용하는 이벤트 객체의 사례를 공유하고, 제대로 사용하는 방법을 알아봅니다.</summary></entry><entry><title>typeof 연산자의 잘못된 사용</title><link href="https://cimfalab.github.io/deepscan/deepscan/2016/07/typeof" rel="alternate" type="text/html" title="typeof 연산자의 잘못된 사용" /><published>2016-07-26T18:00:00+09:00</published><updated>2016-07-26T18:00:00+09:00</updated><id>https://cimfalab.github.io/deepscan/deepscan/2016/07/typeof</id><content type="html" xml:base="https://cimfalab.github.io/deepscan/deepscan/2016/07/typeof">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;잘못된 배열 타입 체크&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#undefined--&quot; id=&quot;markdown-toc-undefined--&quot;&gt;잘못된 undefined 타입 체크&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wrap-up&quot; id=&quot;markdown-toc-wrap-up&quot;&gt;Wrap-Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;첫 번째 공유할 사례는 JavaScript typeof 연산자의 잘못된 사용입니다.&lt;/p&gt;

&lt;p&gt;객체 타입에 따른 코딩을 위해 typeof 연산자를 많이 사용하는데, 이 타입 비교가 잘못된 경우입니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;잘못된 배열 타입 체크&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pChangeMessageList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Array&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pChangeMessageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;|&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pChangeMessageList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;객체가 배열인지 판단하기 위한 코드로서 “Array” 혹은 “array”로 비교하는 경우가 종종 발견됩니다.&lt;/p&gt;

&lt;p&gt;하지만 typeof의 반환 값에는 “Array” 혹은 “array”가 없습니다. (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof&quot;&gt;MDN&lt;/a&gt;을 참고하세요.)&lt;/p&gt;

&lt;p&gt;따라서 객체가 배열인지 체크를 위해서는 &lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray&quot;&gt;Array.isArray()&lt;/a&gt; 혹은  jQuery, underscore 등의 라이브러리에서 제공하는 배열 체크 함수를 사용해야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;undefined--&quot;&gt;잘못된 undefined 타입 체크&lt;/h2&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;788&quot; data-line=&quot;4&quot;&gt;&lt;code&gt;updateZkConfigs: function (configs) {
  var zks = this.getZkServerHosts();
  var portValue = configs[&#39;zoo.cfg&#39;] &amp;amp;&amp;amp; Em.get(configs[&#39;zoo.cfg&#39;], &#39;clientPort&#39;);
  var zkPort = typeof portValue === &#39;udefined&#39; ? &#39;2181&#39; : portValue;
  var zksWithPort = this.concatZkNames(zks, zkPort);
  this.setZKConfigs(configs, zksWithPort, zks);
},&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Apache Ambari 2.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;/app/controllers/main/host/details.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‘undefined’의 오타로서 기본값 ‘2181’이 사용되지 않습니다.
개발자의 의도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;portValue&lt;/code&gt;가 설정되어 있지 않을 경우 기본 포트 2181을 사용하려는 것이나 의도대로 동작하지 않습니다.&lt;/p&gt;

&lt;p&gt;오타를 수정하거나 다음과 같이 수정해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zkPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;portValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;2181&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;portValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;아래는 “undefined”를 사용해야 하는데 “undeifned”로 잘못 사용하는 경우입니다.&lt;/p&gt;

&lt;pre class=&quot; language-javascript  line-numbers &quot; data-start=&quot;5291&quot; data-line=&quot;5&quot;&gt;&lt;code&gt;jindo.$H.prototype.length = function() {
	var i = 0;
	for(var k in this._table) {
		if(this._table.hasOwnProperty(k)){
			if (typeof Object.prototype[k] != &quot;undeifned&quot; &amp;amp;&amp;amp; Object.prototype[k] === this._table[k]) continue;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;right&quot;&gt;– Source: Naver Jindo 1.5.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;jindo.all.js&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;이상 typeof의 잘못된 사용례를 보았습니다.
typeof의 반환 값은 다음과 같이 7개로 한정되어 있으니 타입 비교 시 주의하세요.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“undefined”&lt;/li&gt;
  &lt;li&gt;“object”&lt;/li&gt;
  &lt;li&gt;“boolean”&lt;/li&gt;
  &lt;li&gt;“number”&lt;/li&gt;
  &lt;li&gt;“string”&lt;/li&gt;
  &lt;li&gt;“function”&lt;/li&gt;
  &lt;li&gt;“symbol” (&lt;a href=&quot;https://hacks.mozilla.org/2015/06/es6-in-depth-symbols/&quot;&gt;new in ECMAScript 2015&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--
&lt;ul class=&quot;post-list&quot;&gt;
 
  &lt;li&gt;&lt;article&gt;&lt;a href=&quot;https://cimfalab.github.io/deepscan/2016/08/unused-codes-2&quot;&gt;사용되지 않는 코드 (2) &lt;span class=&quot;entry-date&quot;&gt;&lt;time datetime=&quot;2016-08-01T22:00:00+09:00&quot;&gt;August 01, 2016&lt;/time&gt;&lt;/span&gt; &lt;span class=&quot;excerpt&quot;&gt;JavaScript에서의 중복 조건, 사용되지 않는 표현식 등 사용되지 않는 코드의 사례에 대해 알아봅니다.&lt;/span&gt;&lt;/a&gt;&lt;/article&gt;&lt;/li&gt;

&lt;/ul&gt;
--&gt;</content><category term="JavaScript" /><category term="typeof" /><summary>JavaScript에서 typeof 연산자의 잘못된 사용례를 알아봅니다.</summary></entry></feed>
